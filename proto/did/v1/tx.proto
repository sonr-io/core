syntax = "proto3";

package did.v1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "did/v1/genesis.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/sonr-io/core/x/did/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // ExecuteTx executes a transaction on the Sonr Blockchain. It leverages
  // Macaroon for verification.
  rpc ExecuteTx(MsgExecuteTx) returns (MsgExecuteTxResponse);

  // RegisterController registers a controller.
  rpc RegisterController(MsgRegisterController) returns (MsgRegisterControllerResponse);

  // LinkAssertion links an assertion to a controller.
  rpc LinkVerificationMethod(MsgLinkVerificationMethod) returns (MsgLinkVerificationMethodResponse);

  // UnlinkAssertion unlinks an assertion from a controller.
  rpc UnlinkVerificationMethod(MsgUnlinkVerificationMethod) returns (MsgUnlinkVerificationMethodResponse);

  // UpdateParams defines a governance operation for updating the parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}


// MsgRegisterController is the message type for the RegisterController RPC.
message MsgRegisterController {
  option (cosmos.msg.v1.signer) = "controller";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  VerificationMethod authentication_credential = 2;
  VerificationMethod assertion_dwn = 3;
  VerificationMethod invocation_dwn = 4;
}


// MsgRegisterControllerResponse is the response type for the
// RegisterController RPC.
message MsgRegisterControllerResponse {
  string cid = 1;
  string did = 2;
  map<string, string> accounts = 3;
}

// MsgLinkVerificationMethod is the message type for the LinkVerificationMethod RPC.
message MsgLinkVerificationMethod {
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string controller = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated VerificationMethod authentication = 3;
  repeated VerificationMethod assertion = 4;
  repeated VerificationMethod delegation = 5;
  repeated VerificationMethod invocation = 6;
}

// MsgLinkVerificationMethodResponse is the response type for the
// LinkVerificationMethod RPC.
message MsgLinkVerificationMethodResponse {
  bool success = 1;
  Document document = 2;
}

// MsgUnlinkVerificationMethod is the message type for the UnlinkVerificationMethod RPC.
message MsgUnlinkVerificationMethod {
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string controller = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated string authentication = 3;
  repeated string assertion = 4;
  repeated string delegation = 5;
  repeated string invocation = 6;
}

// MsgUnlinkVerificationMethodResponse is the response type for the
// UnlinkVerificationMethod RPC.
message MsgUnlinkVerificationMethodResponse {
  bool success = 1;
  Document document = 2;
} 

// MsgExecuteTx is the message type for the ExecuteTx RPC.
message MsgExecuteTx {
  option (cosmos.msg.v1.signer) = "controller";
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  map<string, bytes> messages = 2;
  string macaroon_token = 3;
}

// MsgExecuteTxResponse is the response type for the ExecuteTx RPC.
message MsgExecuteTxResponse {
  string tx_hash = 1;
  bool success = 2;
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the parameters to update.
  Params params = 2 [(gogoproto.nullable) = false];

  // token is the macron token to authenticate the operation.
  string token = 3;
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
